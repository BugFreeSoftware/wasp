(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[8899],{1871:function(e,t,n){"use strict";var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},1137:function(e,t,n){"use strict";n.d(t,{Z:function(){return d}});var a=n(7294),r=n(4179);var o=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},i=n(6010),s="tabItem_1uMI",c="tabItemActive_2DSg";var l=37,u=39;var d=function(e){var t=e.lazy,n=e.block,r=e.defaultValue,d=e.values,m=e.groupId,p=e.className,h=o(),f=h.tabGroupChoices,g=h.setTabGroupChoices,y=(0,a.useState)(r),v=y[0],b=y[1],w=a.Children.toArray(e.children),x=[];if(null!=m){var k=f[m];null!=k&&k!==v&&d.some((function(e){return e.value===k}))&&b(k)}var S=function(e){var t=e.currentTarget,n=x.indexOf(t),a=d[n].value;b(a),null!=m&&(g(m,a),setTimeout((function(){var e,n,a,r,o,i,s,l;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,o=e.right,i=window,s=i.innerHeight,l=i.innerWidth,n>=0&&o<=l&&r<=s&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(c),setTimeout((function(){return t.classList.remove(c)}),2e3))}),150))},T=function(e){var t,n;switch(e.keyCode){case u:var a=x.indexOf(e.target)+1;n=x[a]||x[0];break;case l:var r=x.indexOf(e.target)-1;n=x[r]||x[x.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},p)},d.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,className:(0,i.Z)("tabs__item",s,{"tabs__item--active":v===t}),key:t,ref:function(e){return x.push(e)},onKeyDown:T,onFocus:S,onClick:S},n)}))),t?(0,a.cloneElement)(w.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},w.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==v})}))))}},4179:function(e,t,n){"use strict";var a=(0,n(7294).createContext)(void 0);t.Z=a},3353:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return m},default:function(){return h}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i=n(1137),s=n(1871),c=["components"],l={},u="Testing Smart Contracts",d={unversionedId:"guide/schema/test",id:"guide/schema/test",isDocsHomePage:!1,title:"Testing Smart Contracts",description:"Testing of smart contracts initially happens in the Solo testing environment. This enables",source:"@site/docs/guide/schema/test.mdx",sourceDirName:"guide/schema",slug:"/guide/schema/test",permalink:"/wasp/docs/guide/schema/test",editUrl:"https://github.com/iotaledger/chronicle.rs/tree/main/docs/docs/guide/schema/test.mdx",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Posting Asynchronous Requests",permalink:"/wasp/docs/guide/schema/post"},next:{title:"Example Tests",permalink:"/wasp/docs/guide/schema/examples"}},m=[],p={toc:m};function h(e){var t=e.components,n=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"testing-smart-contracts"},"Testing Smart Contracts"),(0,o.kt)("p",null,"Testing of smart contracts initially happens in the Solo testing environment. This enables\nsynchronous, deterministic testing of smart contract functionality without the overhead of\nhaving to start nodes, set up a committee, and send transactions over the Tangle. Instead,\nwe can use Go's built-in test environment in combination with Solo to deploy chains and\nsmart contracts and simulate transactions."),(0,o.kt)("p",null,"Solo directly interacts with the ISCP code and uses all the data types that are\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/blob/develop/documentation/docs/misc/coretypes.md"},"defined in the ISCP code"),"\ndirectly. But our Wasm smart contracts cannot access these types directly because they run\nin a sandboxed environment. Therefore, WasmLib implements its\n",(0,o.kt)("a",{parentName:"p",href:"/wasp/docs/guide/schema/types"},"own versions")," of these data types and the VM layer acts as a data type\ntranslator between both systems."),(0,o.kt)("p",null,"The impact of this type transformation used to be that to be able to write tests in the\nsolo environment the user also needed to know about the ISCP-specific data types and type\nconversion functions, and exactly how to properly pass such data in and out of smart\ncontract function calls. This burdened the user with an unnecessary increased learning\ncurve."),(0,o.kt)("p",null,"With the introduction of the schema tool we were able to remove this impedance mismatch\nand allow the user to test smart contract functionality in terms of the WasmLib data types\nand functions that he is already familiar with. To that end we introduced a new ISCP\nfunction context that specifically works with the Solo testing environment. We aimed to\nsimplify the testing of smart contracts as much as possible, keeping the full Solo\ninterface hidden as much as possible, yet available when necessary."),(0,o.kt)("p",null,"The only concession we still have to make is to the language used. Because Solo only works\nin the Go language environment, we have to use the Go language version of the interface\ncode that the schema tool generates when testing our smart contracts. We feel that this is\nnot unsurmountable, because WasmLib programming for Rust and Go are practically identical.\nThey only differ where language idiosyncrasies force differences in syntax or naming\nconventions. This hurdle used to be a lot bigger before, when direct programming of Solo\nhad to be used, and type conversions had to be done manually. Instead, we now get to use\nthe generated compile-time type-checked interface to our smart contract functions that we\nare already familiar with."),(0,o.kt)("p",null,"Let's look at the simplest way of initializing a smart contract by using the new\n",(0,o.kt)("inlineCode",{parentName:"p"},"SoloContext")," in a test function:"),(0,o.kt)(i.Z,{defaultValue:"go",values:[{label:"Go",value:"go"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func TestDeploy(t *testing.T) {\n    ctx := wasmsolo.NewSoloContext(t, dividend.ScName, dividend.OnLoad)\n    require.NoError(t, ctx.ContractExists(dividend.ScName))\n}\n")))),(0,o.kt)("p",null,"The first line will automatically create a new chain and upload and deploy the provided\nexample ",(0,o.kt)("inlineCode",{parentName:"p"},"dividend")," contract to this chain. It returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"SoloContext")," for further use. The\nsecond line verifies the existence of the deployed contract on the chain associated with\nthe context."),(0,o.kt)("p",null,"Here is another part of the ",(0,o.kt)("inlineCode",{parentName:"p"},"dividend")," test code, where you can see how we wrap repetitive\ncalls to smart contract functions that are used in multiple tests:"),(0,o.kt)(i.Z,{defaultValue:"go",values:[{label:"Go",value:"go"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func dividendMember(ctx *wasmsolo.SoloContext, agent *wasmsolo.SoloAgent, factor int64) {\n    member := dividend.ScFuncs.Member(ctx)\n    member.Params.Address().SetValue(agent.ScAddress())\n    member.Params.Factor().SetValue(factor)\n    member.Func.TransferIotas(1).Post()\n}\n\nfunc dividendDivide(ctx *wasmsolo.SoloContext, amount int64) {\n    divide := dividend.ScFuncs.Divide(ctx)\n    divide.Func.TransferIotas(amount).Post()\n}\n\nfunc dividendGetFactor(ctx *wasmsolo.SoloContext, member3 *wasmsolo.SoloAgent) int64 {\n    getFactor := dividend.ScFuncs.GetFactor(ctx)\n    getFactor.Params.Address().SetValue(member3.ScAddress())\n    getFactor.Func.Call()\n    value := getFactor.Results.Factor().Value()\n    return value\n}\n")))),(0,o.kt)("p",null,"As you can see we pass in the SoloContext and the parameters to the wrapper functions,\nthen use the context to create a function descriptor for the wrapped function, pass any\nparameters through the ",(0,o.kt)("inlineCode",{parentName:"p"},"Params")," proxy, and then either post the function request or call\nthe function. Any results returned are extracted through the ",(0,o.kt)("inlineCode",{parentName:"p"},"Results")," proxy and returned\nby the wrapper."),(0,o.kt)("p",null,"As you can see there is literally no difference in the way the function interface is used\nwith the ISCP function context in WasmLib and with the SoloContext. This makes for\nseamless testing of smart contracts"),(0,o.kt)("p",null,"In the next section we will go deeper into how the helper member functions of the\nSoloContext are used to simplify tests."))}h.isMDXComponent=!0},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(n),p=r,h=m["".concat(c,".").concat(p)]||m[p]||d[p]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6010:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);